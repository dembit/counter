{"version":3,"sources":["Timer/components/Provider.jsx","Timer/components/сonnect.jsx","Timer/components/Interval.jsx","Timer/store/reducer.js","Timer/components/Timer.jsx","index.js","Timer/store/store.js"],"names":["Provider","store","this","props","React","Children","only","children","Component","childContextTypes","PropTypes","object","Onnect","mapStateToProps","mapDispatchToProps","WrappedComponent","handleChange","forceUpdate","context","getState","dispatch","subscribe","contextTypes","IntervalComponent","currentInterval","onClick","changeInterval","Interval","state","value","type","payload","TimerComponent","currentTime","timerId","handleStart","timerIdNew","setInterval","setState","handleStop","clearInterval","disabled","prevProps","prevState","snapshot","Timer","reducer","initialState","currentState","listeners","action","forEach","listener","push","createStore","window","st","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d954a2a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Provider extends React.Component {\r\n    getChildContext() {\r\n        return {\r\n            store: this.props.store,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return React.Children.only(this.props.children)\r\n    }\r\n}\r\n\r\nProvider.childContextTypes = {\r\n    store: PropTypes.object,\r\n}\r\n\r\nexport default Provider;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Onnect = (mapStateToProps, mapDispatchToProps) =>\r\n    Component => {\r\n        class WrappedComponent extends React.Component {\r\n            render() {\r\n                return (\r\n                    <Component\r\n                        {...this.props}\r\n                        {...mapStateToProps(this.context.store.getState(), this.props)}\r\n                        {...mapDispatchToProps(this.context.store.dispatch, this.props)}\r\n                    />\r\n                )\r\n            }\r\n\r\n            componentDidMount() {\r\n                this.context.store.subscribe(this.handleChange)\r\n            }\r\n\r\n            handleChange = () => {\r\n                this.forceUpdate()\r\n            }\r\n        }\r\n\r\n        WrappedComponent.contextTypes = {\r\n            store: PropTypes.object,\r\n        }\r\n\r\n        return WrappedComponent\r\n    }\r\n\r\n\r\nexport default Onnect;","import React from \"react\";\r\nimport Onnect from \"./сonnect\";\r\nimport {changeInterval} from \"../store/reducer\";\r\n\r\nclass IntervalComponent extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span>Интервал обновления секундомера: {this.props.currentInterval} сек.</span>\r\n                <span>\r\n          {this.props.currentInterval > 1 && <button onClick={() => this.props.changeInterval(-1)}>-</button>}\r\n          <button onClick={() => this.props.changeInterval(1)}>+</button>\r\n        </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst Interval =  Onnect(state => ({\r\n        currentInterval: state,\r\n    }), dispatch => ({\r\n    changeInterval: value => dispatch(changeInterval(value)),\r\n}))(IntervalComponent)\r\n\r\nexport default Interval;","const CHANGE_INTERVAL = 'CHANGE_INTERVAL'\r\n\r\nlet initialState = 1\r\n// reducers\r\nexport const reducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_INTERVAL:\r\n            return state += action.payload\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n// action creators\r\nexport const changeInterval = value => ({\r\n    type: CHANGE_INTERVAL,\r\n    payload: value,\r\n})","import React from \"react\";\r\nimport Interval from \"./Interval\";\r\nimport Onnect from \"./сonnect\";\r\n\r\nclass TimerComponent extends React.Component {\r\n    state = {\r\n        currentTime: 0,\r\n        timerId: false,\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Interval/>\r\n                <div>\r\n                    Секундомер: {this.state.currentTime} сек.\r\n                </div>\r\n                <div>\r\n                    <button disabled={!this.state.timerId ? false : true} onClick={this.handleStart}>Старт</button>\r\n                    <button onClick={this.handleStop}>Стоп</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>Какие исправления я внес в данный Секундомер</h3>\r\n                    <div>В createStore добавил строку \"dispatch(type: INSTALL)\" чтобы добавить начальный state\r\n                    </div>\r\n                    <div>\r\n                        В HOOK connect изменил метод на componentDidMount() чтобы выполнить метод subscribe\r\n                    </div>\r\n                    <div>\r\n                        В Interval компоненте поменял местами методы mapStateToProps with mapDispathToprops\r\n                    </div>\r\n                    <div>Так же в Interval компоненте добавил проверку this.props.currentInterval > 1 чтобы не показывать кнопку\r\n                        если значения интервала меньше 1\r\n                    </div>\r\n                    <div>\r\n                        В reducer добавил InitialState\r\n                    </div>\r\n                    <div>\r\n                        В компоненте Timer:\r\n                        <div> -методы handleStart, handleStop были переведены в стрелочные функции чтобы получить доступ\r\n                            this\r\n                        </div>\r\n                        <div>-поменял функцию SetTimeout на setInterval</div>\r\n                        <div>-добавил clearInterval в метод handleStop</div>\r\n                        <div>\r\n                            -добавил метод componentDidUpdate, чтобы при изменении интервала счетчик обнулялся\r\n                        </div>\r\n                        <div>\r\n                            Кнопка старт если счетчик включен принимает состояние disabled\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // при изменении интервала секундамер обнуляется\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.currentInterval != this.props.currentInterval) {\r\n            this.handleStop();\r\n        }\r\n\r\n    }\r\n\r\n    //методы handleStart, handleStop  были переведены в стрелочные функции чтобы получить доступ this\r\n    //поменял функцию на setInterval\r\n    //добавил clearInterval в метод handleStop\r\n\r\n    handleStart = () => {\r\n\r\n        let timerIdNew = setInterval(() => this.setState({\r\n            currentTime: this.state.currentTime + this.props.currentInterval,\r\n        }), this.props.currentInterval * 1000)\r\n        this.setState({\r\n            timerId: timerIdNew\r\n        })\r\n    }\r\n\r\n    handleStop = () => {\r\n        clearInterval(this.state.timerId);\r\n        this.setState({\r\n            timerId: null\r\n        })\r\n        this.setState({currentTime: 0})\r\n    }\r\n}\r\n\r\nconst Timer = Onnect(state => ({\r\n    currentInterval: state,\r\n}), () => {\r\n})(TimerComponent)\r\n\r\nexport default Timer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Provider from \"./Timer/components/Provider\";\r\nimport Timer from \"./Timer/components/Timer\";\r\nimport createStore from \"./Timer/store/store\";\r\nimport {reducer} from \"./Timer/store/reducer\";\r\n\r\n\r\n// Slomux — упрощённая, сломанная реализация Flux.\r\n// Перед вами небольшое приложение, написанное на React + Slomux.\r\n// Это нерабочий секундомер с настройкой интервала обновления.\r\n\r\n// Исправьте ошибки и потенциально проблемный код, почините приложение и прокомментируйте своё решение.\r\n\r\n// При нажатии на \"старт\" должен запускаться секундомер и через заданный интервал времени увеличивать свое значение на значение интервала\r\n// При нажатии на \"стоп\" секундомер должен останавливаться и сбрасывать свое значение\r\n\r\n\r\n// init\r\nlet store = createStore(reducer)\r\nwindow.st = store\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Timer />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n","const INSTALL = \"INSTALL\";\r\n\r\nconst createStore = (reducer, initialState) => {\r\n    let currentState = initialState\r\n    const listeners = []\r\n\r\n    const getState = () => currentState\r\n    const dispatch = action => {\r\n        currentState = reducer(currentState, action)\r\n        listeners.forEach(listener => listener())\r\n    }\r\n\r\n    const subscribe = listener => {\r\n        return listeners.push(listener)\r\n    }\r\n\r\n    dispatch({type: INSTALL})\r\n\r\n    return { getState, dispatch, subscribe }\r\n}\r\n\r\n\r\nexport default createStore;"],"sourceRoot":""}